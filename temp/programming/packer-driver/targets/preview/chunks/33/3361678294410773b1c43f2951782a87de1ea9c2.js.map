{"version":3,"sources":["file:///E:/workspace/CocosDashBoard/3D-Jump/assets/Scripts/GameManager.ts"],"names":["_decorator","Component","Prefab","instantiate","Node","Label","CCInteger","Vec3","Button","PlayerController","ccclass","property","BlockType","GameState","GameManager","type","_road","userOption","onNormalButton","changeButtonColor","normal","normalColor","set","onLimitedTimeButton","limited","onEndlessButton","endless","number","_updateState","start","curState","GS_INIT","playerCtrl","node","on","onPlayerJumpEnd","init","failMenu","successMenu","active","startMenu","generateRoad","setInputActive","setPosition","ZERO","reset","value","GS_PLAYING","stepsLabel","string","setTimeout","GS_END","GS_FAIL","removeAllChildren","push","BT_STONE","i","roadLength","BT_NONE","Math","floor","random","linkedBlocks","j","length","spawnBlockByCount","lastPos","count","block","spawnBlockByType","addChild","setScale","cubePrfb","onStartButtonClicked","playAgain","checkResult","moveIndex"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, instantiate, Node, Label, CCInteger, Vec3, Button } from 'cc';\r\nimport { PlayerController } from \"./PlayerController\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n// 赛道格子类型，坑（BT_NONE）或者实路（BT_STONE）\r\nenum BlockType {\r\n    BT_NONE,\r\n    BT_STONE,\r\n};\r\n\r\nenum GameState {\r\n    GS_INIT,\r\n    GS_PLAYING,\r\n    GS_END,\r\n    GS_FAIL,\r\n};\r\n\r\n@ccclass(\"GameManager\")\r\nexport class GameManager extends Component {\r\n\r\n    // 赛道预制\r\n    @property({ type: Prefab })\r\n    public cubePrfb: Prefab | null = null;\r\n    // 赛道长度\r\n    @property({ type: CCInteger })\r\n    public roadLength: number = 50;\r\n    private _road: BlockType[] = [];\r\n    // 主界面根节点\r\n    @property({ type: Node })\r\n    public startMenu: Node | null = null;\r\n    // 失败页面根节点\r\n    @property({ type: Node })\r\n    public failMenu: Node | null = null;\r\n    // 成功页面根节点\r\n    @property({ type: Node })\r\n    public successMenu: Node | null = null;\r\n    // 关联 Player 节点身上 PlayerController 组件\r\n    @property({ type: PlayerController })\r\n    public playerCtrl: PlayerController | null = null;\r\n    // 关联步长文本组件\r\n    @property({ type: Label })\r\n    public stepsLabel: Label | null = null!;\r\n    //用户选项选择 0-普通模式 1-限时模式 2-无尽模式\r\n    private userOption: number = 0;\r\n    //正常模式button\r\n    @property({ type: Button })\r\n    public normal: Button | null = null;\r\n    //限时模式button\r\n    @property({ type: Button })\r\n    public limited: Button | null = null;\r\n    //无尽模式button\r\n    @property({ type: Button })\r\n    public endless: Button | null = null;\r\n\r\n    //模式修改选择\r\n    onNormalButton() {\r\n        this.changeButtonColor(this.userOption);\r\n        this.userOption = 0;\r\n        this.normal.normalColor.set(255, 0, 0, 255);\r\n    }\r\n\r\n    onLimitedTimeButton() {\r\n        this.changeButtonColor(this.userOption);\r\n        this.userOption = 1;\r\n        this.limited.normalColor.set(255, 0, 0, 255);\r\n    }\r\n\r\n    onEndlessButton() {\r\n        this.changeButtonColor(this.userOption);\r\n        this.userOption = 2;\r\n        this.endless.normalColor.set(255, 0, 0, 255);\r\n    }\r\n\r\n\r\n    //修改相应按钮颜色\r\n    changeButtonColor(number: Number) {\r\n        if (number == 0) {\r\n            this.normal.normalColor.set(0, 164, 0, 255);\r\n            (this.normal as any)._updateState();\r\n        } else if (number == 1) {\r\n            this.limited.normalColor.set(0, 164, 0, 255);\r\n            (this.limited as any)._updateState();\r\n        } else if (number == 2) {\r\n            this.endless.normalColor.set(0, 164, 0, 255);\r\n            (this.endless as any)._updateState();\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this.curState = GameState.GS_INIT;\r\n        this.playerCtrl?.node.on('JumpEnd', this.onPlayerJumpEnd, this);\r\n    }\r\n\r\n    init() {\r\n        if (this.failMenu || this.successMenu) {\r\n            this.failMenu.active = false;\r\n            this.successMenu.active = false;\r\n        }\r\n        // 激活主界面\r\n        if (this.startMenu) {\r\n            this.startMenu.active = true;\r\n        }\r\n        // 生成赛道\r\n        this.generateRoad();\r\n        if (this.playerCtrl) {\r\n            // 禁止接收用户操作人物移动指令\r\n            this.playerCtrl.setInputActive(false);\r\n            // 重置人物位置\r\n            this.playerCtrl.node.setPosition(Vec3.ZERO);\r\n            // 重置已经移动的步长数据\r\n            this.playerCtrl.reset();\r\n        }\r\n    }\r\n\r\n    set curState(value: GameState) {\r\n        switch (value) {\r\n            case GameState.GS_INIT:\r\n                this.init();\r\n                break;\r\n            case GameState.GS_PLAYING:\r\n                if (this.startMenu) {\r\n                    this.startMenu.active = false;\r\n                }\r\n\r\n                if (this.stepsLabel) {\r\n                    this.stepsLabel.string = '0';   // 将步数重置为0\r\n                }\r\n                // 会出现的现象就是，游戏开始的瞬间人物已经开始移动\r\n                // 因此，这里需要做延迟处理\r\n                setTimeout(() => {\r\n                    if (this.playerCtrl) {\r\n                        this.playerCtrl.setInputActive(true);\r\n                    }\r\n                }, 0.1);\r\n                break;\r\n            case GameState.GS_END:\r\n                if (this.successMenu) {\r\n                    this.successMenu.active = true;\r\n                }\r\n                break;\r\n            case GameState.GS_FAIL:\r\n                if (this.failMenu) {\r\n                    this.failMenu.active = true;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    generateRoad() {\r\n        // 防止游戏重新开始时，赛道还是旧的赛道\r\n        // 因此，需要移除旧赛道，清除旧赛道数据\r\n        this.node.removeAllChildren();\r\n        this._road = [];\r\n        // 确保游戏运行时，人物一定站在实路上\r\n        this._road.push(BlockType.BT_STONE);\r\n\r\n        // 确定好每一格赛道类型\r\n        for (let i = 1; i < this.roadLength - 1; i++) {\r\n            // 如果上一格赛道是坑，那么这一格一定不能为坑\r\n            if (this._road[i - 1] === BlockType.BT_NONE) {\r\n                this._road.push(BlockType.BT_STONE);\r\n            } else {\r\n                this._road.push(Math.floor(Math.random() * 2));\r\n            }\r\n        }\r\n        // 最后一格也是石头\r\n        this._road.push(BlockType.BT_STONE);\r\n\r\n        // 根据赛道类型生成赛道\r\n        let linkedBlocks = 0;\r\n        for (let j = 0; j < this._road.length; j++) {\r\n            if (this._road[j]) {\r\n                ++linkedBlocks;\r\n            }\r\n            if (this._road[j] == 0) {\r\n                if (linkedBlocks > 0) {\r\n                    this.spawnBlockByCount(j - 1, linkedBlocks);\r\n                    linkedBlocks = 0;\r\n                }\r\n            }\r\n            if (this._road.length == j + 1) {\r\n                if (linkedBlocks > 0) {\r\n                    this.spawnBlockByCount(j, linkedBlocks);\r\n                    linkedBlocks = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    spawnBlockByCount(lastPos: number, count: number) {\r\n        let block: Node | null = this.spawnBlockByType(BlockType.BT_STONE);\r\n        if (block) {\r\n            this.node.addChild(block);\r\n            block?.setScale(count, 1, 1);\r\n            block?.setPosition(lastPos - (count - 1) * 0.5, -1.5, 0);\r\n        }\r\n    }\r\n    spawnBlockByType(type: BlockType) {\r\n        if (!this.cubePrfb) {\r\n            return null;\r\n        }\r\n\r\n        let block: Node | null = null;\r\n        switch (type) {\r\n            case BlockType.BT_STONE:\r\n                block = instantiate(this.cubePrfb);\r\n                break;\r\n        }\r\n\r\n        return block;\r\n    }\r\n\r\n    onStartButtonClicked() {\r\n        // 点击主界面 play 按钮，开始游戏\r\n        this.curState = GameState.GS_PLAYING;\r\n    }\r\n\r\n    playAgain() {\r\n        this.curState = GameState.GS_INIT;\r\n    }\r\n\r\n    checkResult(moveIndex: number) {\r\n        if (moveIndex < this.roadLength - 1) {\r\n            // 跳到了坑上\r\n            if (this._road[moveIndex] == BlockType.BT_NONE) {\r\n                this.curState = GameState.GS_FAIL;\r\n                // 禁止接收用户操作人物移动指令\r\n                this.playerCtrl.setInputActive(false);\r\n            }\r\n        } else {\r\n            // 跳过了最大长度\r\n            this.curState = GameState.GS_END;\r\n            // 禁止接收用户操作人物移动指令\r\n            this.playerCtrl.setInputActive(false);\r\n        }\r\n    }\r\n\r\n    onPlayerJumpEnd(moveIndex: number) {\r\n        if (this.stepsLabel) {\r\n            // 因为在最后一步可能出现步伐大的跳跃，但是此时无论跳跃是步伐大还是步伐小都不应该多增加分数\r\n            this.stepsLabel.string = '' + (moveIndex >= this.roadLength ? this.roadLength : moveIndex);\r\n        }\r\n        // 检查当前下落道路的类型，获取结果\r\n        this.checkResult(moveIndex);\r\n    }\r\n}"]}